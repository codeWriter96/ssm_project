<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--properties配置文件位置，类路径-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--创建数据源对象-->
    <bean id="mydataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
        <property name="maxActive" value="${jdbc_max}"/>
    </bean>
    <!--创建sqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，将dataSource数据源信息给了dataSource-->
        <property name="dataSource" ref="mydataSource"/>
        <!--Mybatis主配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>
    <!--创建dao对象使用SqlSession的getMapper（class）-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定需要创建代理对象的包名，对包内所有接口创建代理对象，
    如有多个包，在包后采用,隔开，并放入spring容器内，dao为接口名小写-->
        <property name="basePackage" value="com.bytedance.crm.*.dao"/>
    </bean>
    <!--开启注解创建对象功能，对包为base-package下的所有注解进行扫描创建放入容器-->
    <context:component-scan base-package="com.bytedance.crm.*.service"/>
    <context:component-scan base-package="com.bytedance.crm.*.aspect"/>

    <!--==================================事务=====================================================-->
    <!--声明事务管理器，并交给spring管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--设置事务管理器内数据源set注入内容-->
        <property name="dataSource" ref="mydataSource"/>
    </bean>
            <!--开启注解驱动-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <aop:aspectj-autoproxy/>
</beans>